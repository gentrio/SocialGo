apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'

if (IS_LOCAL.toBoolean()){
    uploadArchives {
        repositories {
            mavenDeployer {

                repository(url: 'file://' + rootProject.getRootDir() + File.separator + 'localmvn')

                pom.project {
                    groupId = GROUP
                    artifactId POM_ARTIFACT_ID
                    version VERSION_NAME
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                }

                pom.whenConfigured { pom ->
                    pom.dependencies.findAll { dep -> dep.groupId == rootProject.name }.collect { dep ->
                        dep.groupId = pom.groupId = project.GROUP
                        dep.version = pom.version = project.VERSION_NAME
                    }
                }
            }
        }
    }
}else{
    // load properties
    Properties properties = new Properties()
    File localPropertiesFile = rootProject.file("local.properties")
    if(localPropertiesFile.exists()){
        properties.load(localPropertiesFile.newDataInputStream())
    }

    def projectName = POM_NAME
    def projectGroupId = GROUP
    def projectArtifactId = POM_ARTIFACT_ID
    def projectVersionName = VERSION_NAME
    def projectPackaging = POM_PACKAGING
    def projectSiteUrl = "https://github.com/gentrio/SocialGo"
    def projectGitUrl = "https://github.com/gentrio/SocialGo.git"

    def developerId = "gentriolee"
    def developerName = "gentriolee"
    def developerEmail = "gentriolee@gmail.com"

    def bintrayUser = properties.getProperty("bintray.user")
    def bintrayApikey = properties.getProperty("bintray.apikey")

    def javadocName = POM_NAME + "doc"

    group = projectGroupId

// This generates POM.xml with proper parameters
    install {
        repositories.mavenInstaller {
            pom {
                project {
                    name projectName
                    groupId projectGroupId
                    artifactId projectArtifactId
                    version projectVersionName
                    packaging projectPackaging
                    url projectSiteUrl
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id developerId
                            name developerName
                            email developerEmail
                        }
                    }
                    scm {
                        connection projectGitUrl
                        developerConnection projectGitUrl
                        url projectSiteUrl
                    }
                }

                pom.whenConfigured { pom ->
                    pom.dependencies.findAll { dep -> dep.groupId == rootProject.name }.collect { dep ->
                        dep.groupId = pom.groupId = project.GROUP
                        dep.version = pom.version = project.VERSION_NAME
                    }
                }
            }
        }
    }

// This generates sources.jar
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false
    }

// Add compile dependencies to javadoc
    afterEvaluate {
        javadoc.classpath += files(android.libraryVariants.collect { variant ->
            variant.javaCompile.classpath.files
        })
    }

// This generates javadoc.jar
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

// javadoc configuration
    javadoc {
        options{
            encoding "UTF-8"
            charSet 'UTF-8'
            author true
            version projectVersionName
            links "http://docs.oracle.com/javase/7/docs/api"
            title javadocName
        }
    }

// bintray configuration
    bintray {
        user = bintrayUser
        key = bintrayApikey
        configurations = ['archives']
        pkg {
            repo = "maven"
            name = projectName
            websiteUrl = projectSiteUrl
            vcsUrl = projectGitUrl
            licenses = ["Apache-2.0"]
            publish = true
        }
    }
}